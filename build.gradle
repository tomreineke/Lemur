buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        // This sucks down a lot of stuff that 'normal' users wouldn't
        // have and won't need anyway.
        if( project.hasProperty('releaseUser') ) {
            classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.6'
        }
    }
}

apply plugin: 'java'

version='1.11.0'

ext.jmeVersion='3.2.1-stable'

ext {
    bintrayLabels = ['jMonkeyEngine', 'gamedev', 'GUI']
    releaseDescription = "Lemur ${project.version}"
    releaseVcsTag = "v${project.version}"
}

repositories {
    mavenLocal()
    jcenter()
}

dependencies {
    compile "org.jmonkeyengine:jme3-core:$jmeVersion"
    compile 'com.simsilica:lemur-proto:1.9.1'
    compile "org.jmonkeyengine:jme3-blender:$jmeVersion"
    compile "org.jmonkeyengine:jme3-desktop:$jmeVersion"
    compile "org.jmonkeyengine:jme3-effects:$jmeVersion"
    compile "org.jmonkeyengine:jme3-lwjgl3:$jmeVersion"
    compile "org.jmonkeyengine:jme3-lwjgl3:$jmeVersion"
    compile 'org.codehaus.groovy:groovy-all:2.5.3'
    compile "org.slf4j:slf4j-api:1.7.5"

    compile 'com.google.guava:guava:19.0'
    compile 'org.slf4j:slf4j-api:1.7.13'
}

compileJava.doLast {
    def buildDate = new Date().format('yyyyMMdd')
    println "Writing lemur.build.date:" + buildDate
    new File(destinationDir, 'lemur.build.date').text = buildDate
}

// Common configuration for the root and all 'real' children.
// The plan is to just keep maven-repo publishing related stuff
// here so that the other build files can look as close to
// regular java builds as possible.
configure(allprojects.findAll {it.name != 'extensions'}) {

    apply plugin: 'maven' // for installing to maven local

    // Common group ID for all projects here
    group='com.simsilica'

    ext {
        websiteUrl = 'https://github.com/jMonkeyEngine-Contributions/Lemur'
        vcsUrl = 'https://github.com/jMonkeyEngine-Contributions/Lemur.git'
        githubRepo = 'jMonkeyEngine-Contributions/Lemur'
        issueTrackerUrl = 'https://github.com/jMonkeyEngine-Contributions/Lemur/issues'
    }


    // One non-maven thing in this block to keep us honest with respect to
    // imports
    configurations {
        compile.transitive = false
    }

    // Centralizing this bintray reference here so it's easier to
    // remove when JME is in jcenter().
    repositories {
        // Temporary until JME jars are in jcenter()
        //maven { url "http://dl.bintray.com/jmonkeyengine/org.jmonkeyengine" }
        jcenter()
    }

    sourceSets.main.java.srcDirs = [ "src/main/java", "examples/demos/src/main/java" ]

    /*
    // Configuration to produce maven-repo style -sources and -javadoc jars
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }
    */

}

// *** For some reason, this can't be injected from the root project
//     or it picks up the root project sources instead of the subproject
//     and doesn't even produce main jars.
// Configuration to produce maven-repo style -sources and -javadoc jars
task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
    exclude '**/.backups'
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}


// Put this at the end or it won't pick up the project.version and stuff
// ...thus it also can't be injected.  But that means we can also be selective
// about the sub-projects that we release.
if( project.hasProperty('releaseUser') ) {
    apply plugin: 'com.jfrog.bintray'
    apply from: 'https://raw.githubusercontent.com/Simsilica/gradle-plugins/master/simtools-release.gradle'
}